discovery_dir = '/projects/discovery/warehouse/discovery_prd.db'
discovery_latest_dir = '/projects/discovery/warehouse/discovery_latest.db'

from pyspark.sql.functions import *
from pyspark.sql.types import *
from pyspark.sql import Window
from pyspark.sql import functions as F 
from pyspark.sql import Row
from pyspark.sql import *
from pyspark.sql.functions import regexp_extract, regexp_replace, col

import pandas as pd
pd.options.display.max_columns = None
pd.options.display.max_rows = 200

fact_claims = spark.read.parquet(discovery_dir + "/fact_claims.parquet")

master = fact_claims\
                .filter(col('year') > 2017)\
                .filter(col('amt_paid') > 0)\
                .join(dim_nappi, col('nappi_cd') == col('nappi9'), 'inner')\
                .filter(col('product_type_description') == 'Surgical')\
                .filter(col('product_name') != 'Dummy nappi')\
                .join(dim_surgical_mapping, 'nappi9', 'left_outer')\
                .join(dim_provider, col('billing_practice_no') == col('practice_no'), 'left_outer')\
                .join(fact_events, col('claim_line_event_id') == col('fe_event_no'), 'left_outer')\
                .join(dim_provider_network, 'billing_practice_no', 'left_outer')\
                .join(dim_hospitals, 'hospital_practice_no', 'left_outer')\
                .na.fill('Unknown', 'tr_network_descr')\
                .filter(col('tr_network_descr') != 'Dummy 58 Network')\
                .withColumn('provider_type', when(col('category_descr') == 'Clinical', col('tr_practice_type_desc'))
                           .when(col('category_descr') == 'Pharmacy', lit('Pharmacy'))
                           .when(col('category_descr') == 'Hospitals', lit('Hospitals'))
                           .otherwise(lit('Other')) 
                           )\
                .withColumn('inh3', col('industry_network_hierarchy_3'))\
                .na.fill('Unknown', 'inh3')\
                .withColumn('tnd', col('tr_network_descr'))\
                .na.fill('Unknown', 'tnd')\
                .withColumn('provider_group', when(col('category_descr') == 'Clinical', lit('Unknown'))
                           .when(col('category_descr') == 'Pharmacy', col('inh3'))
                           .when(col('category_descr') == 'Hospitals', col('tnd'))
                           .otherwise(lit('Unknown'))
                           )\
                .withColumn('tpnd', col('tr_practice_no_descr'))\
                .na.fill('Unknown', 'tpnd')\
                .withColumn('thpd', col('tr_hospital_practice_descr'))\
                .na.fill('Unknown', 'thpd')\
                .withColumn('provider', when(col('category_descr') == 'Clinical', lit('Private'))
                           .when(col('category_descr') == 'Pharmacy', col('tpnd'))
                           .when(col('category_descr') == 'Hospitals', col('thpd'))
                           .otherwise(lit('Private'))
                           )\
                .withColumn('units', col('quantity') * col('pack_size'))\
                .groupby(col('year'), col('month_key'), col('manufacturer'), col('tr_high_level_1'), col('tr_high_level_2'),
                         col('tr_high_level_3'), col('tr_high_level_4'), col('tr_province_descr'), col('tr_region_descr'),
                         col('provider'), col('provider_group'), col('provider_type'))\
                .agg(sum('amt_paid').alias('amt_paid'), sum('units').alias('units'))
                
     master.repartition(1).write.mode('overwrite').options(header=True).csv('/home/abansal/master_20201103')
     master.limit(5).toPandas()
